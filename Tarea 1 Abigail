{
 "metadata": {
  "name": "Tarea-01"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Tarea 1: Ejercicios de calentamiento con Python"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "**REGLAS:**\n",
      "\n",
      "- Usa Python para llevar a cabo las tareas. [O julia...]\n",
      "\n",
      "- S\u00ed se permite el trabajo colaborativo, y de hecho se fomenta, pero se exige el uso de las neuronas de todos los que colaboren. Se vale entregar una sola tarea por grupo de 2 o (si es necesario) 3 personas.\n",
      "\n",
      "- La tarea se entrega como un *notebook* de IPython, y debe incluir notas, comentario y **TODO** lo est\u00e9ticamente necesario, que lo haga entendible para una tercer persona no involucrada en el curso. \n",
      "\n",
      "- Se recomienda usar una versi\u00f3n nueva de este mismo notebook, reemplazando *[Respuesta aqu\u00ed] por tu discusi\u00f3n, c\u00f3digo, y resultados (en los tipos de celda que convengan, y con el n\u00famero de ellos que haga falta).\n",
      "\n",
      "- Cambia el nombre del notebook para reflejar el nombre que escojan para su grupo de trabajo, e.g. \"Tarea-01-profes\"\n",
      "\n",
      "\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "**1.** Implementa (con Python) el llamado \"m\u00e9todo Babil\u00f3nico\" para calcular la ra\u00edz cuadrada de un \n",
      "n\u00famero dado, $y$. Este m\u00e9todo consiste en la iteraci\u00f3n \n",
      "$ x_{n+1} = \\frac{1}{2} ( x_n + \\frac{y}{x_n}). $\n",
      "\n",
      "a. \u00bfCu\u00e1ndo se deber\u00eda terminar la iteracion?\n",
      "\n",
      "b. \u00bfCu\u00e1l es la convergencia del m\u00e9todo?\n",
      "\n",
      "c. Calcula, usando este m\u00e9todo, la ra\u00edz cuadrada de los n\u00fameros $0$ hasta $10$, en pasos de $0.1$.\n",
      "\n",
      "d. \u00bfQu\u00e9 ser\u00eda bueno \"poder hacer\" --y que a\u00fan no hemos aprendido-- con este c\u00f3digo para poderlo correr muchas veces sin tener que incluirlo expl\u00edcitamente?"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "*[Respuestas aqu\u00ed]*\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "a. La iteraci\u00f3n deber\u00eda terminar cuando $ x_n^2$ sea igual a $y$ o bien cuando la diferencia entre ambos valores sea lo suficientemente peque\u00f1a; es decir menor a cierto n\u00famero fijado al inicio de la iteraci\u00f3n."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "b. La diferencia entre el valor de la raiz cuadrada de cierto n\u00famero y el valor aproximado por este m\u00e9todo, \n",
      "puede estimarse como $x_n^2-y$ ; aun sabiendo que es incorrecta esta definici\u00f3n da una idea de qu\u00e9 tan bueno es el m\u00e9todo.\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "c. El c\u00f3digo del programa para calcular la raiz aparece en el siguiente recuadro y debajo se muestran los resultados."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import numpy as np\n",
      "n=10/.1+1 #calcula cuantos n\u00fameros hay entre 0 y 10, con pasos de 0.1\n",
      "t = np.linspace(0,10,n) #crea un vector que contiene dichos n\u00fameros\n",
      "x=1  #se propone un valor para la raiz\n",
      "print \"  n\u00famero\" \"      raiz cuadrada   \"\n",
      "for y in t:\n",
      "    d=(y-x*x)**2  #se verifica que la raiz x calculada o dada en el paso previo aun no es lo suficientemente exacta\n",
      "    dif=d**0.5   \n",
      "    while dif > 0.0000000001:  #la diferencia entre x*x y y debe ser menor a este criterio\n",
      "        x=0.5*(y/x+x) # se aplica el m\u00e9todo babil\u00f3nico\n",
      "        xx=x*x        #se eleva al cuadrado el valor obtenido para ver si se aproxima lo sufiente a y\n",
      "        d=(y-xx)**2\n",
      "        dif=d**0.5\n",
      "    \n",
      "    print \"  \",y,\"      \",x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "  n\u00famero      raiz cuadrada   \n",
        "   0.0        7.62939453125e-06\n",
        "   0.1        0.316227766023\n",
        "   0.2        0.4472135955\n",
        "   0.3        0.547722557505\n",
        "   0.4        0.632455532034\n",
        "   0.5        0.707106781187\n",
        "   0.6        0.77459666927\n",
        "   0.7        0.836660026542\n",
        "   0.8        0.894427191003\n",
        "   0.9        0.948683298052\n",
        "   1.0        1.0\n",
        "   1.1        1.04880884817\n",
        "   1.2        1.09544511501\n",
        "   1.3        1.1401754251\n",
        "   1.4        1.18321595662\n",
        "   1.5        1.22474487139\n",
        "   1.6        1.26491106407\n",
        "   1.7        1.30384048104\n",
        "   1.8        1.3416407865\n",
        "   1.9        1.37840487521\n",
        "   2.0        1.41421356237\n",
        "   2.1        1.44913767462\n",
        "   2.2        1.48323969742\n",
        "   2.3        1.51657508881\n",
        "   2.4        1.54919333848\n",
        "   2.5        1.58113883008\n",
        "   2.6        1.61245154966\n",
        "   2.7        1.64316767252\n",
        "   2.8        1.67332005307\n",
        "   2.9        1.70293863659\n",
        "   3.0        1.73205080757\n",
        "   3.1        1.76068168617\n",
        "   3.2        1.788854382\n",
        "   3.3        1.81659021246\n",
        "   3.4        1.84390889146\n",
        "   3.5        1.87082869339\n",
        "   3.6        1.8973665961\n",
        "   3.7        1.92353840617\n",
        "   3.8        1.94935886896\n",
        "   3.9        1.97484176581\n",
        "   4.0        2.0\n",
        "   4.1        2.02484567313\n",
        "   4.2        2.04939015319\n",
        "   4.3        2.07364413533\n",
        "   4.4        2.09761769634\n",
        "   4.5        2.12132034356\n",
        "   4.6        2.14476105895\n",
        "   4.7        2.16794833887\n",
        "   4.8        2.19089023002\n",
        "   4.9        2.21359436212\n",
        "   5.0        2.2360679775\n",
        "   5.1        2.25831795813\n",
        "   5.2        2.2803508502\n",
        "   5.3        2.30217288664\n",
        "   5.4        2.32379000772\n",
        "   5.5        2.34520787991\n",
        "   5.6        2.36643191324\n",
        "   5.7        2.38746727726\n",
        "   5.8        2.40831891576\n",
        "   5.9        2.4289915603\n",
        "   6.0        2.44948974278\n",
        "   6.1        2.46981780705\n",
        "   6.2        2.4899799196\n",
        "   6.3        2.5099800796\n",
        "   6.4        2.52982212813\n",
        "   6.5        2.5495097568\n",
        "   6.6        2.56904651573\n",
        "   6.7        2.58843582111\n",
        "   6.8        2.60768096208\n",
        "   6.9        2.62678510731\n",
        "   7.0        2.64575131106\n",
        "   7.1        2.66458251889\n",
        "   7.2        2.683281573\n",
        "   7.3        2.70185121722\n",
        "   7.4        2.72029410175\n",
        "   7.5        2.73861278753\n",
        "   7.6        2.75680975042\n",
        "   7.7        2.7748873851\n",
        "   7.8        2.79284800875\n",
        "   7.9        2.81069386451\n",
        "   8.0        2.82842712475\n",
        "   8.1        2.84604989415\n",
        "   8.2        2.86356421266\n",
        "   8.3        2.88097205818\n",
        "   8.4        2.89827534924\n",
        "   8.5        2.91547594742\n",
        "   8.6        2.93257565972\n",
        "   8.7        2.94957624075\n",
        "   8.8        2.96647939484\n",
        "   8.9        2.98328677804\n",
        "   9.0        3.0\n",
        "   9.1        3.0166206258\n",
        "   9.2        3.03315017762\n",
        "   9.3        3.0495901364\n",
        "   9.4        3.06594194335\n",
        "   9.5        3.08220700148\n",
        "   9.6        3.09838667697\n",
        "   9.7        3.11448230048\n",
        "   9.8        3.1304951685\n",
        "   9.9        3.14642654451\n",
        "   10.0        3.16227766017\n"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "**2.** Considera la f\u00f3rmula de recursi\u00f3n $ x_{n+1} = x_n^2 $. \n",
      "\n",
      "a. \u00bfCu\u00e1l es el valor del iterado $x_{75}$ cuando el valor inicial es $x_0=1-10^{-20}$, calculado num\u00e9ricamente? \n",
      "\n",
      "b. Compara el resultado num\u00e9rico obtenido con el que uno esperar\u00eda al elevar al cuadrado un n\u00famero ligeramente menor que 1 un \n",
      "mont\u00f3n de veces... \u00bfCu\u00e1l resultado es el correcto? \n",
      "\n",
      "c. \u00bfQu\u00e9 necesitar\u00edas para verificar esto num\u00e9ricamente?\n",
      "\n",
      "d. Suele ser una buena idea hacer el c\u00f3digo m\u00e1s general posible, para no repetir esfuerzos despu\u00e9s. \u00bfC\u00f3mo podr\u00edas escribir c\u00f3digo para la iteraci\u00f3n general $x_{n+1} = f(x_n)$, donde $f$ es una funci\u00f3n dada (una funci\u00f3n implementada con `def` en Python)?\n",
      "\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "*[Respuestas aqu\u00ed]*"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "a. C\u00f3digo para la recursi\u00f3n $ x_{n+1} = x_n^2 $. \n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import numpy as np\n",
      "from sympy.mpmath import *\n",
      "\n",
      "mp.dps = 25 #se pide que la precisi\u00f3n sea de 25 decimales\n",
      "g=np.linspace(1,75,75)\n",
      "uno = mpf(1)\n",
      "r = mpf(10e-20)\n",
      "x=uno-r    \n",
      "print \"0.0\",x\n",
      "for t in g:\n",
      "    x=x*x\n",
      "    print t,x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0.0 0.9999999999999999999\n",
        "1.0 0.9999999999999999998\n",
        "2.0 0.9999999999999999996\n",
        "3.0 0.9999999999999999992\n",
        "4.0 0.9999999999999999984000001\n",
        "5.0 0.9999999999999999968000001\n",
        "6.0 0.9999999999999999936000002\n",
        "7.0 0.9999999999999999872000004\n",
        "8.0 0.9999999999999999744000008\n",
        "9.0 0.9999999999999999488000016\n",
        "10.0 0.9999999999999998976000032\n",
        "11.0 0.9999999999999997952000065\n",
        "12.0 0.999999999999999590400013\n",
        "13.0 0.999999999999999180800026\n",
        "14.0 0.999999999999998361600052\n",
        "15.0 0.999999999999996723200104\n",
        "16.0 0.999999999999993446400208\n",
        "17.0 0.999999999999986892800416\n",
        "18.0 0.9999999999999737856008319\n",
        "19.0 0.9999999999999475712016638\n",
        "20.0 0.9999999999998951424033276\n",
        "21.0 0.9999999999997902848066552\n",
        "22.0 0.9999999999995805696133105\n",
        "23.0 0.9999999999991611392266211\n",
        "24.0 0.9999999999983222784532429\n",
        "25.0 0.9999999999966445569064887\n",
        "26.0 0.9999999999932891138129886\n",
        "27.0 0.9999999999865782276260223\n",
        "28.0 0.9999999999731564552522248\n",
        "29.0 0.9999999999463129105051701\n",
        "30.0 0.9999999998926258210132225\n",
        "31.0 0.9999999997852516420379742\n",
        "32.0 0.9999999995705032841220653\n",
        "33.0 0.999999999141006568428598\n",
        "34.0 0.9999999982820131375950656\n",
        "35.0 0.9999999965640262781416101\n",
        "36.0 0.9999999931280525680891357\n",
        "37.0 0.9999999862561051834019328\n",
        "38.0 0.9999999725122105556985104\n",
        "39.0 0.9999999450244218669755893\n",
        "40.0 0.9999998900488467562653697\n",
        "41.0 0.999999780097705601786839\n",
        "42.0 0.9999995601954595605927597\n",
        "43.0 0.9999991203911125492193104\n",
        "44.0 0.9999982407829988102335033\n",
        "45.0 0.9999964815690924649242817\n",
        "46.0 0.9999929631505642858996615\n",
        "47.0 0.9999859263506458217802328\n",
        "48.0 0.9999718528993592497048265\n",
        "49.0 0.9999437065909777738901788\n",
        "50.0 0.9998874163509034471240055\n",
        "51.0 0.9997748453768849381437622\n",
        "52.0 0.9995497414483741863730711\n",
        "53.0 0.9990996856295116849216173\n",
        "54.0 0.9982001818249890776142992\n",
        "55.0 0.99640360299544125487584\n",
        "56.0 0.9928201400622969088662773\n",
        "57.0 0.9856918305133188515682503\n",
        "58.0 0.9715883847406972966151103\n",
        "59.0 0.9439839893630372354515198\n",
        "60.0 0.8911057721737547964859118\n",
        "61.0 0.7940694972013837881527534\n",
        "62.0 0.6305463663856584557653783\n",
        "63.0 0.3975887201621570317487945\n",
        "64.0 0.1580767904001820134103001\n",
        "65.0 0.02498827166322307635142002\n",
        "66.0 0.0006244137207150373705107982\n",
        "67.0 0.0000003898924946171966894306101\n",
        "68.0 1.520161573588207494422198e-13\n",
        "69.0 2.310891209814175189288462e-26\n",
        "70.0 5.340218183596422256688115e-52\n",
        "71.0 2.851793024841387144917925e-103\n",
        "72.0 8.132723456533988557428366e-206\n",
        "73.0 6.614119082045814646875169e-411\n",
        "74.0 4.37465712314825697842664e-821\n",
        "75.0 1.913762494511178402243909e-1641\n"
       ]
      }
     ],
     "prompt_number": 56
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "b. Elevar al cuadrado un n\u00famero x menor que 1 da como resultado un n\u00famero menor que x, por lo cual al repetir el procedimiento muchas veces eventualmente el n\u00famero llegar\u00e1 a ser un valor muy cercano a cero.\n",
      "\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "c. Si la precisi\u00f3n del programa es suficiente el numero podr\u00e1 ser tan cercano a cero como se desee."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "d. El siguiente c\u00f3digo muestra una recursi\u00f3n que hace la iteraci\u00f3n de cualquier otra funci\u00f3n."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import numpy as np\n",
      "from sympy.mpmath import *\n",
      "\n",
      "mp.dps = 25\n",
      "n=75\n",
      "tt = np.linspace(0,74,n) \n",
      "\n",
      "\n",
      "def funcion(xo):\n",
      "\treturn xo**2\n",
      "\n",
      "def f(xo):   #con esta funci\u00f3n se puede iterar cualquier otra \"funci\u00f3n(xo)\"\n",
      "\tfor y in (tt):\n",
      "\t\tv = funcion(xo)\n",
      "\t\txo = v;\n",
      "\t\tprint \"  \",y+1,\"   \", v\n",
      "\treturn\n",
      "\t\n",
      "uno = mpf(1)\n",
      "r = mpf(10e-20)\n",
      "xo=uno-r \n",
      "\n",
      "f(xo)\n",
      " "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "   1.0     0.9999999999999999998\n",
        "   2.0     0.9999999999999999996\n",
        "   3.0     0.9999999999999999992\n",
        "   4.0     0.9999999999999999984000001\n",
        "   5.0     0.9999999999999999968000001\n",
        "   6.0     0.9999999999999999936000002\n",
        "   7.0     0.9999999999999999872000004\n",
        "   8.0     0.9999999999999999744000008\n",
        "   9.0     0.9999999999999999488000016\n",
        "   10.0     0.9999999999999998976000032\n",
        "   11.0     0.9999999999999997952000065\n",
        "   12.0     0.999999999999999590400013\n",
        "   13.0     0.999999999999999180800026\n",
        "   14.0     0.999999999999998361600052\n",
        "   15.0     0.999999999999996723200104\n",
        "   16.0     0.999999999999993446400208\n",
        "   17.0     0.999999999999986892800416\n",
        "   18.0     0.9999999999999737856008319\n",
        "   19.0     0.9999999999999475712016638\n",
        "   20.0     0.9999999999998951424033276\n",
        "   21.0     0.9999999999997902848066552\n",
        "   22.0     0.9999999999995805696133105\n",
        "   23.0     0.9999999999991611392266211\n",
        "   24.0     0.9999999999983222784532429\n",
        "   25.0     0.9999999999966445569064887\n",
        "   26.0     0.9999999999932891138129886\n",
        "   27.0     0.9999999999865782276260223\n",
        "   28.0     0.9999999999731564552522248\n",
        "   29.0     0.9999999999463129105051701\n",
        "   30.0     0.9999999998926258210132225\n",
        "   31.0     0.9999999997852516420379742\n",
        "   32.0     0.9999999995705032841220653\n",
        "   33.0     0.999999999141006568428598\n",
        "   34.0     0.9999999982820131375950656\n",
        "   35.0     0.9999999965640262781416101\n",
        "   36.0     0.9999999931280525680891357\n",
        "   37.0     0.9999999862561051834019328\n",
        "   38.0     0.9999999725122105556985104\n",
        "   39.0     0.9999999450244218669755893\n",
        "   40.0     0.9999998900488467562653697\n",
        "   41.0     0.999999780097705601786839\n",
        "   42.0     0.9999995601954595605927597\n",
        "   43.0     0.9999991203911125492193104\n",
        "   44.0     0.9999982407829988102335033\n",
        "   45.0     0.9999964815690924649242817\n",
        "   46.0     0.9999929631505642858996615\n",
        "   47.0     0.9999859263506458217802328\n",
        "   48.0     0.9999718528993592497048265\n",
        "   49.0     0.9999437065909777738901788\n",
        "   50.0     0.9998874163509034471240055\n",
        "   51.0     0.9997748453768849381437622\n",
        "   52.0     0.9995497414483741863730711\n",
        "   53.0     0.9990996856295116849216173\n",
        "   54.0     0.9982001818249890776142992\n",
        "   55.0     0.99640360299544125487584\n",
        "   56.0     0.9928201400622969088662773\n",
        "   57.0     0.9856918305133188515682503\n",
        "   58.0     0.9715883847406972966151103\n",
        "   59.0     0.9439839893630372354515198\n",
        "   60.0     0.8911057721737547964859118\n",
        "   61.0     0.7940694972013837881527534\n",
        "   62.0     0.6305463663856584557653783\n",
        "   63.0     0.3975887201621570317487945\n",
        "   64.0     0.1580767904001820134103001\n",
        "   65.0     0.02498827166322307635142002\n",
        "   66.0     0.0006244137207150373705107982\n",
        "   67.0     0.0000003898924946171966894306101\n",
        "   68.0     1.520161573588207494422198e-13\n",
        "   69.0     2.310891209814175189288462e-26\n",
        "   70.0     5.340218183596422256688115e-52\n",
        "   71.0     2.851793024841387144917925e-103\n",
        "   72.0     8.132723456533988557428366e-206\n",
        "   73.0     6.614119082045814646875169e-411\n",
        "   74.0     4.37465712314825697842664e-821\n",
        "   75.0     1.913762494511178402243909e-1641\n"
       ]
      }
     ],
     "prompt_number": 55
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 49
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Por alguna raz\u00f3n la precisi\u00f3n no es suficiente y el programa no alcanza a calcular $x_n$ con $n=75$"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "**3.** *\"Hace muchos muchos a\u00f1os, en un reino muy lejano...\"*, se le ocurri\u00f3 a Arqu\u00edmedes un m\u00e9todo para determinar el valor num\u00e9rico de $\\pi$. El m\u00e9todo consiste en considerar dos pol\u00edgonos regulares de $n$ lados, uno inscrito y otro circunscrito al c\u00edrculo, y ver c\u00f3mo el \u00e1rea de estos acota por abajo y arriba el \u00e1rea del c\u00edrculo. \n",
      "\n",
      "a. Da las cotas (inferior y superior) al \u00e1rea del c\u00edrculo de radio 1, *al menos* cuando $n=4$, $5$ y $6$ (o sea, las cotas que se obtienen usando los siguientes pol\u00edgonos regulares:  el cuadrado, el pent\u00e1gono y el hex\u00e1gono). \n",
      "\n",
      "[Arqu\u00edmedes seguramente hizo esto de manera emp\u00edrica, construyendo los pol\u00edgonos; para este ejercicio se \n",
      "vale utilizar lo que sabes de geometr\u00eda y trigonometr\u00eda.]\n",
      "\n",
      "b. \u00bfSe te ocurre c\u00f3mo obtener las cotas para $\\pi$ usando un pol\u00edgono regular de $n$ lados?\n",
      "\n",
      "(\u00c9ste es el **Ejercicio 1.1** del Moore-Kearfortt (2009); la soluci\u00f3n que ellos dan para $n=4$ me parece que est\u00e1 mal en la cota inferior.)"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "*[Respuestas aqu\u00ed]*\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Estos dos casos (n=4,6) se resuelven sin usar trigonometr\u00eda. Ai es la cota inrefior de \u00e1rea y Ac es la cota superior."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "En el caso de n=4 (cuadrado) si $r=1$, $ l_i=sqrt(2) $ y  $ l_c=2 $. Por tanto el \u00e1rea es:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "Ai=2\n",
      "Ac=2*2\n",
      "print   \"Ai=\", Ai,\"Ac=\",Ac"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Ai= 2 Ac= 4\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "En el caso de n=6 (pent\u00e1gono) si $r=1, l_i=1$  y  $a_c=1$. Y en general para n=6, $a=sqrt(3)/2*l$. Por tanto"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "li=1\n",
      "ac=1\n",
      "ai=3**0.5/2*li\n",
      "lc=ac/(3**0.5/2)\n",
      "\n",
      "Ai=6*li*ai/2\n",
      "Ac=6*lc*ac/2\n",
      "\n",
      "print   \"Ai=\", Ai,\"Ac=\",Ac"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Ai= 2.59807621135 Ac= 3.46410161514\n"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Las \u00e1reas de un pol\u00edgono de $n$ lados inscrito y uno circuscrito en una circunferencia de radio 1 est\u00e1n dadas por $ A_i=n sin(2t)/2 $ y $ A_c=ntan(t) $ respectivamente; donde t es $ 180\u00b0/n $.  Para esto s\u00ed se usan funciones trigonom\u00e9tricas. Como el radio es 1, pi es igual al Area."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Consid\u00e9rense los casos en que $n=4,5,6,7,8,9,10,100,1000,100000$."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "n=[4,5,6,7,8,9,10,100,1000,100000]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 62
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "mp.dps = 25\n",
      "print \"lados     Ai        Ac\"\n",
      "for nn in n:\n",
      "    Ai=nn*(sin(2*pi/nn))/2\n",
      "    Ac=nn*(tan(pi/nn))\n",
      "    print nn, Ai,\"   \", Ac\n",
      "    "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "lados     Ai        Ac\n",
        "4 2.0     4.0\n",
        "5 2.377641290737883930291098     3.632712640026804429477334\n",
        "6 2.598076211353315940291169     3.464101615137754587054893\n",
        "7 2.736410188638104330479556     3.371022331652700510325136\n",
        "8 2.828427124746190097603377     3.31370849898476039041351\n",
        "9 2.892544243589426968451895     3.275732108395821252159431\n",
        "10 2.93892626146236564584353     3.249196962329063261558714\n",
        "100 3.139525976465668803808911     3.142626604335114781881063\n",
        "1000 3.141571982779475624867655     3.141602989056156126041343\n",
        "100000 3.141592651522708126850682     3.141592654623335794880664\n"
       ]
      }
     ],
     "prompt_number": 63
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}
